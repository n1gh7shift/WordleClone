@page "/"

@using System
@using Data


<div class="game-container">
    <div class="title-container"><h1>Wordle</h1></div>
    <div class="message-container">@onscreenMessage</div>
    <div class="tile-container">
        

        @for (int i = 0; i < 6; i++)
        {

            <div class="guessRow" id="guessRow-">
                @for (int j = 0; j < 5; j++)
                {
                    <div class="tile @gameBoard[i][j].colour">@gameBoard[i][j].letter</div>
                }
            </div>
        }
    </div>
    <div class="key-container"> 
        @foreach (var t in keyboard)
        {
            <button class="@t.colour" @onclick="@(() => keyClicked(@t.key))" id="@t.key">@t.key</button>
        }
    </div>
</div>

@code{
    private string wordle = "surfs".ToUpper();

    private int currentRow = 0;
    private int currentTile = 0;
    private string onscreenMessage = "";

    public List<List<Tile>> gameBoard = new();
    public class Tile
    {
        public string letter { get; set; } = "";
        public string colour { get; set; } = "";
        public int checkValue { get; set; } = 0; //0 is none, 1 is correct position, 2 is incorrect position 3 is incorrect
    }

    public Tile blankTile = new Tile() { letter = "", colour = "" };

    private async Task<string> getRandomWords()
    {

        var client = new HttpClient();
        var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri("https://random-words5.p.rapidapi.com/getMultipleRandom?count=5&wordLength=5"),
                Headers =
                    {
                        { "x-rapidapi-host", "random-words5.p.rapidapi.com" },
                        { "x-rapidapi-key", "f5541f1923msh471c8a5350dedf0p1e20d0jsn14fdfc21f08b" },
                    },
            };
        using (var response = await client.SendAsync(request))
        {
            response.EnsureSuccessStatusCode();
            var body = await response.Content.ReadAsStringAsync();
            body = body.Substring(2, 5);
            Log($"The word is {body}");
            wordle = body.ToUpper();
            return (body);
        }

    }

    private async Task keyClicked(string letter)
    {
        Log($"Clicked {letter}");
        if (letter == "<<")
        {
            if(currentTile > 0){
                currentTile--;
                Log($"Deleting {gameBoard[currentRow][currentTile].letter}");
                gameBoard[currentRow][currentTile].letter = "";
            }
        }
        else if (letter == "ENTER")
        {
            if (String.IsNullOrEmpty(gameBoard[currentRow][4].letter))
            {
                await showMessage($"Require a 5 Letter Guess");
            }else
            {

                bool validGuessCheck = await dictionaryWordCheck($"{gameBoard[currentRow][0].letter}{gameBoard[currentRow][1].letter}{gameBoard[currentRow][2].letter}{gameBoard[currentRow][3].letter}{gameBoard[currentRow][4].letter}");
                if (validGuessCheck == false){
                    await showMessage($"Not a valid word.");
                }
                else{

                    if (currentRow < 6)
                    {

                        bool result = await checkGuess();
                        if (result == false && currentRow < 5)
                        {
                            Log($"Check guess was Incorrect on attempt {currentRow + 1}");
                            currentRow++;
                            currentTile = 0;
                        }
                        else if (result == false && currentRow >= 5)
                        {
                            Log($"Check guess was Incorrect on attempt {currentRow + 1 } - Final");
                            Log($"Game Over Requested");
                            await GameOver("Game Over!");
                        }
                        else
                        {
                            Log($"Check Guess was Correct");
                            Log($"Game Over Requested");
                            await GameOver("Magnificent!");
                        }


                    }
                }
            }
        }
        else if(currentTile < 5 )
        {
            gameBoard[currentRow][currentTile].letter = letter;
            currentTile++;
        }
        Log($"Current Row - {currentRow} - Current Tile - {currentTile}");
    }

    private async Task showMessage(string message)
    {
        onscreenMessage = $"{message}";
        await InvokeAsync(StateHasChanged);
        await Task.Delay(3000);
        onscreenMessage = $"";
        await InvokeAsync(StateHasChanged);
    }


    private string[] keys = new string[]{"q","w","e","r","t","y","u","i","o","p","a","s","d","f","g","h","j","k","l","ENTER","z","x","c","v","b","n","m","<<"};

    public List<Key> keyboard = new();

    public class Key
    {
        public string colour = "";
        public string key = "";
    }


    private bool logEnable = true;

    private void Log(string log)
    {
        if (logEnable)
        {
            Console.WriteLine(log);
        }

    }

    private async Task<bool> checkGuess()
    {
        Log("Check Guess Run");
        //get current row, collate the letters to make a word
        // compare that word against the Wordle variable
        // return game over game state based on result

        string guess = "";
        string checkWord = wordle;
        for (int i = 0; i < 5; i++)
        {
            char currentLetter = gameBoard[currentRow][i].letter[0];
            Log($"checkword = {checkWord}");
            //Log($"currentLetter={currentLetter}");
            if (currentLetter == wordle[i])                                 //Correct Letter Correct Placement
            {
                Log($"Letter {currentLetter} matches {wordle[i]}");
                gameBoard[currentRow][i].checkValue = 1;
                Log($"row {currentRow} tile {i} checkValue set to 1");
                if(checkWord.IndexOf(currentLetter) >= 0)
                {
                    Log($"if passed - result = {checkWord.IndexOf(currentLetter)}");
                    checkWord = checkWord.Remove(checkWord.IndexOf(currentLetter), 1);
                    Log($"checkWord is now {checkWord}");
                }

            }

        }
        for (int i = 0; i < 5; i++)
        {
            char currentLetter = gameBoard[currentRow][i].letter[0];
            if(gameBoard[currentRow][i].checkValue != 1)
            {
                if(checkWord.IndexOf(currentLetter) >= 0)
                {                                                                //Correct Letter Wrong Position
                    Log($"Letter {currentLetter} matches {checkWord} at wrong positon. Correct postition is {wordle.IndexOf(currentLetter)}");
                    gameBoard[currentRow][i].checkValue = 2;
                    checkWord = checkWord.Remove(checkWord.IndexOf(currentLetter), 1);

                }
                else                                                            //Incorrect Letter
                {
                    Log($"Letter does not match - \"{currentLetter}\"");
                    gameBoard[currentRow][i].checkValue = 3;
                }
            }

            guess += gameBoard[currentRow][i].letter;
            Log($"guess building, guess={guess}");

        }
        for (int i = 0; i < 5; i++)
        {
            if (gameBoard[currentRow][i].checkValue == 1)
            {
                gameBoard[currentRow][i].colour = "green-overlay";
                foreach (var t in keyboard)
                {
                    if (t.key == gameBoard[currentRow][i].letter)
                    {
                        t.colour = "green-overlay";
                        break;

                    }
                }

            }
            if (gameBoard[currentRow][i].checkValue == 2)
            {
                gameBoard[currentRow][i].colour = "yellow-overlay";
                foreach (var t in keyboard)
                {
                    if (t.key == gameBoard[currentRow][i].letter && t.colour != "green-overlay")
                    {
                        t.colour = "yellow-overlay";
                        break;

                    }
                }
            }
            if (gameBoard[currentRow][i].checkValue == 3)
            {
                gameBoard[currentRow][i].colour = "grey-overlay";
                foreach (var t in keyboard)
                {
                    if (t.key == gameBoard[currentRow][i].letter && String.IsNullOrEmpty(t.colour))
                    {
                        t.colour = "grey-overlay";
                        break;

                    }
                }
            }

            await Task.Delay(300);
            await InvokeAsync(StateHasChanged);
            Log($"await delay 500");

        }



        guess = guess.ToUpper();
        Log($"guess to Lower - guess = {guess}");
        if (guess == wordle)
        {

            return true;

        }
        else
        {
            return false;
        }
    }

    private async Task GameOver(string Message)
    {
        Log($"GameOver activated - with message {Message}");
        await showMessage(Message);
        await Task.Delay(3000);
        await resetGame();
        await InvokeAsync(StateHasChanged);
    }
    private async Task resetGame(){
        await getRandomWords();

        for (int i = 0; i < 6; i++)
        {
            for (int j = 0; j < 5; j++)
            {
                gameBoard[i][j].letter = "";
                gameBoard[i][j].colour = "";
                gameBoard[i][j].checkValue = 0;
            }
        }
        foreach (var t in keyboard)
        {
            t.colour = "";
        }
        currentRow = 0;
        currentTile = 0;
        await InvokeAsync(StateHasChanged);
        //get new word
    }

    private async Task InitialiseGameBoard()
    {
        for (int i = 0; i < 6; i++)
        {
            gameBoard.Add(new List<Tile>());
            for (int j = 0; j < 5; j++)
            {
                gameBoard[i].Add(new Tile() { letter = "", colour = "" });
            }
        }
        await resetGame();
    }

    private async Task InitialiseKeyboard()
    {
        foreach (var t in keys)
        {
            keyboard.Add(new Key() { colour = "", key = $"{t.ToUpper() }" });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await InitialiseGameBoard();
        await InitialiseKeyboard();
    }

    private async Task<bool> dictionaryWordCheck(string WordToTest)
    {   
        DictionaryWordCheck responseData;
        Log($"Running Dictionary Check on word {WordToTest}");


        var client = new HttpClient();
        var request = new HttpRequestMessage

        {
            Method = HttpMethod.Get,
            RequestUri = new Uri($"https://twinword-word-graph-dictionary.p.rapidapi.com/association/?entry={WordToTest}"),
            Headers =
            {
                { "x-rapidapi-host", "twinword-word-graph-dictionary.p.rapidapi.com" },
                { "x-rapidapi-key", "f5541f1923msh471c8a5350dedf0p1e20d0jsn14fdfc21f08b" },
            },
        };
        using (var response = await client.SendAsync(request))
        {
            if(response.IsSuccessStatusCode){
                responseData = await response.Content.ReadFromJsonAsync<DictionaryWordCheck>();

                Log($"result_code=\"{responseData.result_code}\" and result_msg=\"{responseData.result_msg}\"");
                if(responseData.result_code == "200")
                {
                    return true;
                }
                else
                {
                    await showMessage($"{responseData.result_msg}");
                    return false;
                }
            }
            else
            {
                showMessage($"There was an error: {response.ReasonPhrase}");
                return false;
            }
        }
    }


}